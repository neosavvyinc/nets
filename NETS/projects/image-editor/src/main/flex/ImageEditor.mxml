<?xml version="1.0" encoding="utf-8"?>
<mx:Application 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	layout="absolute" 
	xmlns:imagecropper="com.flexblocks.imagecropper.*" 
	xmlns:local="*"
    paddingBottom="0"
    paddingLeft="0"
    paddingRight="0"
    paddingTop="0"
    horizontalScrollPolicy="off"
    verticalScrollPolicy="off"
    backgroundColor="0xFFFFFF"
    backgroundAlpha="0"
    backgroundGradientAlphas="[0xffffff,0xffffff]"
    creationComplete="{creationCompleteHandler()}">
	
	<mx:Script>
		<![CDATA[

        import com.flexblocks.imagecropper.ImageCropper;

        import mx.logging.Log;
        import mx.logging.LogEventLevel;
        import mx.logging.targets.TraceTarget;


        // Current values for the cropping rectangle, handle size, and aspect ratio constraint settings

        private var currentCropbox:Rectangle;
        private var currentHandleSize:uint = 10;
        private var currentCropConstraint:Boolean = false




        // --------------------------------------------------------------------------------------------------
        // imageReady - Called when the ImageCropper component has loaded and initialized an image
        // --------------------------------------------------------------------------------------------------

        private function imageReady(event:Event):void {
            // Restore the handle size that was previously saved for this image
            var imageCropper:ImageCropper = getChildByName("imageCropper") as ImageCropper;
            imageCropper.handleSize = currentHandleSize;
            //handleSize.value = currentHandleSize;

            // Restore "Constrain Crop Rectangle to Aspect Ratio" to the setting that was previously saved for the image

            imageCropper.constrainToAspectRatio = currentCropConstraint;

            // If this image was not previously selected then set the cropping rectangle to include the entire image. Otherwise,
            // restore the cropping rectangle to its previous value. Note that the cropping rectangle is relative to the component
            // and not to the image because the componentRelative parameter in the call the to setCropRect is set to true.

            if (!currentCropbox) imageCropper.setCropRect();
            else imageCropper.setCropRect(currentCropbox.width, currentCropbox.height, currentCropbox.x, currentCropbox.y, true);

        }

        // --------------------------------------------------------------------------------------------------
        // doCrop - Get the cropped image from the ImageCropper component
        // --------------------------------------------------------------------------------------------------

        private function doCrop(event:Event):void {

            // Get the cropped BitmapData
            var imageCropper:ImageCropper = getChildByName("imageCropper") as ImageCropper;
            var newImage:BitmapData = imageCropper.croppedBitmapData;

            // Create a new Bitmap from the BitmapData and assign it to the croppedImage Image
            croppedImage.source = new Bitmap(newImage);

//            // Center the image based on the newly cropped area
//            var totalCroppedWidth:Number = croppedImage.getExplicitOrMeasuredWidth();
//            var totalCroppedHeight:Number = croppedImage.getExplicitOrMeasuredHeight();
//
//            var totalAvailableHeight:Number = height;
//            var totalAvailableWidth:Number = width;
//
//            var cropX:Number = (totalAvailableWidth / 2) - (totalCroppedWidth / 2);
//            var cropY:Number = (totalAvailableHeight / 2) - (totalCroppedHeight / 2);
//
//            croppedImage.x = cropX;
//            croppedImage.y = cropY;

        }


        var imageUrlString:String;
        private function creationCompleteHandler():void {
            Security.allowInsecureDomain("*");
            imageUrlString = this.parameters.imageUrl;

            var aMaxWidth:Number = this.parameters.width;
            var aMaxHeight:Number = this.parameters.height;

            if (imageUrlString) {
                croppedImage.source = imageUrlString;
            }

            if (aMaxWidth)
            {
                width = maxWidth = aMaxWidth;
            }

            if (aMaxHeight)
            {
                height = maxHeight = aMaxHeight;
            }

        }


        private function enableLogging():void {
            var logTarget:TraceTarget = new TraceTarget();

            // Log only messages for the classes in the mx.rpc.* and
            // mx.messaging packages.
            logTarget.filters = ["*"];

            // Log all log levels.
            logTarget.level = LogEventLevel.ALL;

            // Add date, time, category, and log level to the output.
            logTarget.includeDate = true;
            logTarget.includeTime = true;
            logTarget.includeCategory = true;
            logTarget.includeLevel = true;

            // Begin logging.
            Log.addTarget(logTarget);

        }

        private var cropperInitialized:Boolean = false;

        private function handleModeChange():void {
            croppedImage.visible = false;
            var imageCropper:ImageCropper = getChildByName("imageCropper") as ImageCropper;
            if (imageCropper)
                imageCropper.visible = false;

            switch (modeSelector.selectedIndex) {
                case 0:
                    croppedImage.visible = true;
                    break;
                case 1:
                    if (!cropperInitialized) {
                        var imageCropper:ImageCropper = new ImageCropper();
                        imageCropper.id = "imageCropper";
                        imageCropper.name = "imageCropper";
                        imageCropper.width = croppedImage.width;
                        imageCropper.height = croppedImage.height;
                        imageCropper.enabled = true;
                        imageCropper.handleColor = 0xFF00FF;
                        imageCropper.maskColor = 0x660066;
                        imageCropper.maskAlpha = 0.6;
                        imageCropper.addEventListener(imageCropper.SOURCE_IMAGE_READY, imageReady);
                        imageCropper.addEventListener(imageCropper.CROP_RECT_CHANGED, doCrop);
                        imageCropper.addEventListener(imageCropper.CROP_CONSTRAINT_CHANGED, doCrop);
                        imageCropper.addEventListener(imageCropper.CROP_DIMENSIONS_CHANGED, doCrop);
                        imageCropper.addEventListener(imageCropper.CROP_POSITION_CHANGED, doCrop);
                        imageCropper.visible = false;
                        addChildAt(imageCropper, 1);
                        cropperInitialized = true;
                        imageCropper.sourceImage = imageUrlString;
                    }
                    imageCropper.visible = true;
                    break;
            }
        }
		]]>
	</mx:Script>
    
    <mx:Image id="croppedImage" scaleContent="true" visible="true" width="98%" height="98%">
        <mx:filters>
            <mx:DropShadowFilter/>
      </mx:filters>
    </mx:Image>
    <mx:ToggleButtonBar x="10" y="10" id="modeSelector" itemClick="{handleModeChange()}">
        <mx:dataProvider>
            <mx:String>View</mx:String>
            <mx:String>Crop</mx:String>
        </mx:dataProvider>
    </mx:ToggleButtonBar>
	
</mx:Application>

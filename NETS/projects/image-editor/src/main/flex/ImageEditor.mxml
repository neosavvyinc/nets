<?xml version="1.0" encoding="utf-8"?>
<mx:Application 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	layout="horizontal" 
	xmlns:imagecropper="com.flexblocks.imagecropper.*" 
	xmlns:local="*"
    paddingBottom="0"
    paddingLeft="0"
    paddingRight="0"
    paddingTop="0"
    horizontalScrollPolicy="off"
    verticalScrollPolicy="off"
    creationComplete="{creationCompleteHandler()}">
	
	<mx:Script>
		<![CDATA[

        import com.flexblocks.imagecropper.ImageCropper;

        // Index of last image selected using the selectImage ComboBox

        private var lastSelectedImage:uint = 0;

        // Current values for the cropping rectangle, handle size, and aspect ratio constraint settings

        private var currentCropbox:Rectangle;
        private var currentHandleSize:uint = 10;
        private var currentCropConstraint:Boolean = false

        // Image 1 ("Image Larger then Component"): Last values for the cropping rectangle, handle size, and aspect ratio constraint settings

        private var img1Cropbox:Rectangle;
        private var img1HandleSize:uint = 10;
        private var img1CropConstraint:Boolean = false;

        // Image 2 ("Image Smaller than Component"): Last values for the cropping rectangle, handle size, and aspect ratio constraint settings

        private var img2Cropbox:Rectangle;
        private var img2HandleSize:uint = 10;
        private var img2CropConstraint:Boolean = false;

        // --------------------------------------------------------------------------------------------------
        // imageReady - Called when the ImageCropper component has loaded and initialized an image
        // --------------------------------------------------------------------------------------------------

        private function imageReady(event:Event):void {
            // Restore the handle size that was previously saved for this image
            var imageCropper:ImageCropper = imageCanvas.getChildByName("imageCropper") as ImageCropper;
            imageCropper.handleSize = currentHandleSize;
            //handleSize.value = currentHandleSize;

            // Restore "Constrain Crop Rectangle to Aspect Ratio" to the setting that was previously saved for the image

            imageCropper.constrainToAspectRatio = currentCropConstraint;

            // If this image was not previously selected then set the cropping rectangle to include the entire image. Otherwise,
            // restore the cropping rectangle to its previous value. Note that the cropping rectangle is relative to the component
            // and not to the image because the componentRelative parameter in the call the to setCropRect is set to true.

            if (!currentCropbox) imageCropper.setCropRect();
            else imageCropper.setCropRect(currentCropbox.width, currentCropbox.height, currentCropbox.x, currentCropbox.y, true);

        }

        // --------------------------------------------------------------------------------------------------
        // doCrop - Get the cropped image from the ImageCropper component
        // --------------------------------------------------------------------------------------------------

        private function doCrop(event:Event):void {

            // Get the cropped BitmapData
            var imageCropper:ImageCropper = imageCanvas.getChildByName("imageCropper") as ImageCropper;
            var newImage:BitmapData = imageCropper.croppedBitmapData;

            // Set the width and height of the croppedImage Image based on the dimensions of the cropped image

            croppedImage.width = newImage.width;
            croppedImage.height = newImage.height;

            // Create a new Bitmap from the BitmapData and assign it to the croppedImage Image

            croppedImage.source = new Bitmap(newImage);

        }


        var imageUrlString:String;
        private function creationCompleteHandler():void {
           Security.allowInsecureDomain("*");
            imageUrlString = this.parameters.imageUrl;
            if( imageUrlString ) {
                croppedImage.source = imageUrlString;
            }

        }

        private var cropperInitialized:Boolean = false;

        private function handleModeChange():void {
            croppedImage.visible = false;
            var imageCropper:ImageCropper = imageCanvas.getChildByName("imageCropper") as ImageCropper;
            if(imageCropper)
                imageCropper.visible = false;

            switch (modeSelector.selectedIndex) {
                case 0:
                    croppedImage.visible = true;
                    break;
                case 1:
                    if( !cropperInitialized ) {
                        var imageCropper:ImageCropper = new ImageCropper();
                        imageCropper.id = "imageCropper";
                        imageCropper.name = "imageCropper";
                        imageCropper.width = croppedImage.width;
                        imageCropper.height = croppedImage.height;
                        imageCropper.enabled = true;
                        imageCropper.handleColor = 0xFF00FF;
                        imageCropper.maskColor = 0x660066;
                        imageCropper.maskAlpha = 0.6;
                        imageCropper.addEventListener(imageCropper.SOURCE_IMAGE_READY, imageReady);
                        imageCropper.addEventListener(imageCropper.CROP_RECT_CHANGED, doCrop);
                        imageCropper.addEventListener(imageCropper.CROP_CONSTRAINT_CHANGED, doCrop);
                        imageCropper.addEventListener(imageCropper.CROP_DIMENSIONS_CHANGED, doCrop);
                        imageCropper.addEventListener(imageCropper.CROP_POSITION_CHANGED, doCrop);
                        imageCropper.visible = false;
                        imageCanvas.addChildAt(imageCropper,1);
                        cropperInitialized = true;
                        imageCropper.sourceImage = imageUrlString;
                    }
                    imageCropper.visible = true;
                    break;
            }
        }
		]]>
	</mx:Script>
    <mx:Canvas id="imageCanvas">
        <mx:Image id="croppedImage" scaleContent="false" visible="true" />
        <mx:ToggleButtonBar x="10" y="10" id="modeSelector" itemClick="{handleModeChange()}">
            <mx:dataProvider>
                <mx:String>View</mx:String>
                <mx:String>Crop</mx:String>
            </mx:dataProvider>
        </mx:ToggleButtonBar>
    </mx:Canvas>
	
</mx:Application>

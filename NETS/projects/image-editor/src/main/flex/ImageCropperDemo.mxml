<?xml version="1.0" encoding="utf-8"?>
<mx:Application 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:c="com.flexblocks.imagecropper.*" 
	layout="absolute" 
	width="610" 
	height="500" 
	horizontalScrollPolicy="off" 
	verticalScrollPolicy="off"
	backgroundGradientColors="[0x555555, 0x555555]">
	            
	<mx:Style>	
		Label {
			color: #BBBBBB;
		}
		
		CheckBox {
			color: #BBBBBB;
			textRollOverColor: #BBBBBB;
			textSelectedColor: #BBBBBB;
		}						
	</mx:Style>
	
	<mx:Script>
		<![CDATA[
		
			// Index of last image selected using the selectImage ComboBox
			
			private var lastSelectedImage:uint = 0;
			
			// Current values for the cropping rectangle, handle size, and aspect ratio constraint settings
			
			private var currentCropbox:Rectangle;
			private var currentHandleSize:uint = 10;
			private var currentCropConstraint:Boolean = false
			
			// Image 1 ("Image Larger then Component"): Last values for the cropping rectangle, handle size, and aspect ratio constraint settings
			
			private var img1Cropbox:Rectangle;
			private var img1HandleSize:uint = 10;
			private var img1CropConstraint:Boolean = false;
			
			// Image 2 ("Image Smaller than Component"): Last values for the cropping rectangle, handle size, and aspect ratio constraint settings

			private var img2Cropbox:Rectangle;			
			private var img2HandleSize:uint = 10;
			private var img2CropConstraint:Boolean = false;			
			
			// --------------------------------------------------------------------------------------------------
			// doImageSelect - Called when an image is selected using the selectImage ComboBox
			// --------------------------------------------------------------------------------------------------

			private function doImageSelect():void {
				
				// Remove the previously cropped image
				
				croppedImage.source = null;
				croppedImage.width = 0;
				croppedImage.height = 0;
				
				// Save the cropping rectangle, handle size and constraint option for the previous image so that these settings 
				// may be restored when the image is re-selected
				
				if (lastSelectedImage == 0) { 
					img1Cropbox = imageCropper.getCropRect(true);
					img1HandleSize = imageCropper.handleSize;
					img1CropConstraint = constrainToAspectRatio.selected;
				}
				else {
					img2Cropbox = imageCropper.getCropRect(true);
					img2HandleSize = imageCropper.handleSize;
					img2CropConstraint = constrainToAspectRatio.selected;
				}
				
				// Update the saved ComboBox index to the index for the newly selected image
				
				lastSelectedImage = selectImage.selectedIndex;	
				
				// Restore the cropping rectangle, handle size and constraint option for the image just selected
											
				currentCropbox = lastSelectedImage == 0 ? img1Cropbox : img2Cropbox;
				currentHandleSize = lastSelectedImage == 0 ? img1HandleSize : img2HandleSize;
				currentCropConstraint = lastSelectedImage == 0 ? img1CropConstraint : img2CropConstraint;
				
				// Tell the ImageCropper component to begin loading the selected image
				
				imageCropper.sourceImage = selectImage.selectedItem.data;				

				// Disable all controls while the image is loading. This is done after the sourceImage is assigned
				// to the ImageCropper because when the ImageCropper is disabled a sourceImage cannot be assigned.
				
				enableControls(false, true);			
			}

			// --------------------------------------------------------------------------------------------------
			// imageReady - Called when the ImageCropper component has loaded and initialized an image
			// --------------------------------------------------------------------------------------------------
			
			private function imageReady():void {
				
				// Enable the controls (including the imageCropper). Note that the imageCropper must be enabled before changing property values or calling setCropRect().
				
				enableControls(true, true);
							
				// Restore the handle size that was previously saved for this image
				
				imageCropper.handleSize = currentHandleSize;
				handleSize.value = currentHandleSize;
				
				// Restore "Constrain Crop Rectangle to Aspect Ratio" to the setting that was previously saved for the image
				
				imageCropper.constrainToAspectRatio = currentCropConstraint;
				constrainToAspectRatio.selected = currentCropConstraint;

				// If this image was not previously selected then set the cropping rectangle to include the entire image. Otherwise,
				// restore the cropping rectangle to its previous value. Note that the cropping rectangle is relative to the component
				// and not to the image because the componentRelative parameter in the call the to setCropRect is set to true.
				
				if (!currentCropbox) imageCropper.setCropRect();
				else imageCropper.setCropRect(currentCropbox.width, currentCropbox.height, currentCropbox.x, currentCropbox.y, true);
				
				// Get the cropped image 
				
				doCrop();				
			}
			
			// --------------------------------------------------------------------------------------------------
			// doCrop - Get the cropped image from the ImageCropper component
			// --------------------------------------------------------------------------------------------------

			private function doCrop():void {
				
				// Get the cropped BitmapData
				
				var newImage:BitmapData = imageCropper.croppedBitmapData;
				
				// Set the width and height of the croppedImage Image based on the dimensions of the cropped image
				
				croppedImage.width = newImage.width;
				croppedImage.height = newImage.height;

				// Create a new Bitmap from the BitmapData and assign it to the croppedImage Image
				
				croppedImage.source = new Bitmap(newImage);
				
				// Display the cropping rectangle in relative to the ImageCropper component and relative to the image
				
				imageCropperRect.text = imageCropper.getCropRect(true, true).toString();
				sourceImageRect.text = imageCropper.getCropRect(false, true).toString();
			}	
			
			// --------------------------------------------------------------------------------------------------
			// enableControls - Enables or disables the controls
			// --------------------------------------------------------------------------------------------------
			
			private function enableControls(enable:Boolean, includeEnabled:Boolean = false):void {
				
				// The checkbox to enable/disable the ImageCropper component is only affected if includeEnabled is set to true
				
				if (includeEnabled) enableComponent.enabled = enable;
				
				// Set the enabled state for all other controls
				
				imageCropper.enabled = enable;
				selectImage.enabled = enable;
				outlineColor.enabled = enable;
				outlineAlpha.enabled = enable;
				handleColor.enabled = enable;
				handleAlpha.enabled = enable;
				maskColor.enabled = enable;
				maskAlpha.enabled = enable;
				backgroundColor.enabled = enable;
				backgroundAlpha.enabled = enable;
				handleSize.enabled = enable;
				constrainToAspectRatio.enabled = enable;
			}
		]]>
	</mx:Script>
	
	<mx:Label x="14" y="11" text="ImageCropper Component" fontWeight="bold" color="#FFFFFF" /> 
	<c:ImageCropper 
		id="imageCropper" 
		y="37" 
		left="15" 
		width="280" 
		height="280" 
		enabled="true" 
		sourceImage="large.jpg" 
		handleColor="#FF00FF" 
		maskColor="#660066" 
		maskAlpha="0.6"
		sourceImageReady="imageReady()"  
		sourceImageLoadError="trace('Error while loading image')" 
		cropRectChanged="doCrop()" 
		cropConstraintDisabled="constrainToAspectRatio.selected = false"
		cropConstraintChanged="{trace('Crop constraint changed'); doCrop()}" 
		cropDimensionsChanged="{trace('Crop dimensions changed'); doCrop()}" 
		cropPositionChanged="{trace('Crop position changed'); doCrop()}" />			

	<mx:Label x="314" y="11" text="Cropped Image" fontWeight="bold" color="#FFFFFF" />
	<mx:Canvas y="37" right="15" width="280" height="280" backgroundColor="#000000">
		<mx:Image id="croppedImage" scaleContent="false" />
	</mx:Canvas>	

	<mx:CheckBox id="enableComponent" x="15" y="338" enabled="false" label="Enable the ImageCropper Component" selected="true" change="enableControls(enableComponent.selected)" />

	<mx:ComboBox id="selectImage" x="15" y="369" enabled="false" change="doImageSelect()" width="250">
		<mx:dataProvider>
			<mx:Array>
				<mx:Object label="Image Larger then Component Size" data="large.jpg" />
				<mx:Object label="Image Smaller than Component Size" data="small.jpg" />
			</mx:Array>
		</mx:dataProvider>
	</mx:ComboBox>
	
	<mx:Label x="314" y="340" text="Outline" />
	<mx:ColorPicker id="outlineColor" x="391" y="337" enabled="false" selectedColor="#FFFFFF" change="imageCropper.outlineColor = outlineColor.selectedColor" />
	<mx:HSlider id="outlineAlpha" x="422" y="340" width="171" enabled="false" allowTrackClick="true" minimum="0" maximum="1" snapInterval=".05" value="1" liveDragging="true" change="imageCropper.outlineAlpha = outlineAlpha.value" />

	<mx:Label x="314" y="370" text="Handles" />
	<mx:ColorPicker id="handleColor" x="391" y="369" enabled="false" selectedColor="#FF00FF" change="imageCropper.handleColor = handleColor.selectedColor" />
	<mx:HSlider id="handleAlpha" x="422" y="371" width="171" enabled="false" allowTrackClick="true" minimum="0" maximum="1" snapInterval=".05" value=".5" liveDragging="true" change="imageCropper.handleAlpha = handleAlpha.value" />

	<mx:Label x="314" y="404" text="Mask" />
	<mx:ColorPicker id="maskColor" x="391" y="401" enabled="false" selectedColor="#660066" change="imageCropper.maskColor = maskColor.selectedColor" />
	<mx:HSlider id="maskAlpha" x="422" y="404" width="171" enabled="false" allowTrackClick="true" minimum="0" maximum="1" value=".6" snapInterval=".05" liveDragging="true" change="imageCropper.maskAlpha = maskAlpha.value" />	

	<mx:Label x="314" y="435" text="Background" />
	<mx:ColorPicker id="backgroundColor" x="391" y="432" enabled="false" selectedColor="#000000" change="imageCropper.backgroundColor = backgroundColor.selectedColor" />
	<mx:HSlider id="backgroundAlpha" x="422" y="435" width="171" enabled="false" minimum="0" maximum="1" liveDragging="true" value="1" snapInterval=".05" allowTrackClick="true" change="imageCropper.backgroundAlpha = backgroundAlpha.value" />
	
	<mx:Label x="13" y="435" text="Handle Size:" />
	<mx:HSlider id="handleSize" x="92" y="435" width="177" enabled="false" allowTrackClick="true" minimum="3" maximum="20" value="10" snapInterval="1" liveDragging="true" change="imageCropper.handleSize = handleSize.value" /> 
	
	<mx:CheckBox id="constrainToAspectRatio" x="15" y="402" enabled="false" label="Constrain Crop Rectangle to Aspect Ratio" selected="false" change="imageCropper.constrainToAspectRatio = constrainToAspectRatio.selected" />

	<mx:Label x="13" y="466" text="ImageCropper Rect:" />
	<mx:Label  id="imageCropperRect" x="133" y="466" />

	<mx:Label x="314" y="466" text="Crop Rect:" />
	<mx:Label id="sourceImageRect" x="389" y="466" />
	
</mx:Application>
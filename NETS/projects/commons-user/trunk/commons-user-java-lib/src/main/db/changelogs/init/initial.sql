CREATE TABLE ACL_CLASS
(ID BIGSERIAL NOT NULL,
class VARCHAR(255) NOT NULL,
PRIMARY KEY (ID));

CREATE INDEX IX_ACL_CLASS_UNQ_ACL_CLASS_0 ON ACL_CLASS (CLASS);
ALTER TABLE ACL_CLASS ADD CONSTRAINT UNQ_ACL_CLASS_0 UNIQUE (CLASS);

CREATE TABLE ACL_SID
(ID BIGSERIAL NOT NULL,
sid VARCHAR(100) NOT NULL,
principal BOOLEAN NOT NULL,
PRIMARY KEY (ID));

CREATE INDEX IX_ACL_SID_UNQ_ACL_SID_0 ON ACL_SID (SID, PRINCIPAL);
ALTER TABLE ACL_SID ADD CONSTRAINT UNQ_ACL_SID_0 UNIQUE (SID, PRINCIPAL);

CREATE TABLE ACL_OBJECT_IDENTITY
(ID BIGSERIAL NOT NULL,
OBJECT_ID_IDENTITY BIGINT NOT NULL,
ENTRIES_INHERITING BOOLEAN NOT NULL,
PARENT_OBJECT BIGINT REFERENCES ACL_OBJECT_IDENTITY(ID),
OBJECT_ID_CLASS BIGINT NOT NULL REFERENCES ACL_CLASS(ID),
OWNER_SID BIGINT NOT NULL REFERENCES ACL_SID(ID),
PRIMARY KEY (ID));

CREATE INDEX IX_ACL_OBJECT_IDENTITY_UNQ_ACL_OBJECT_IDENTITY_0 ON ACL_OBJECT_IDENTITY (OBJECT_ID_CLASS, OBJECT_ID_IDENTITY);
ALTER TABLE ACL_OBJECT_IDENTITY ADD CONSTRAINT UNQ_ACL_OBJECT_IDENTITY_0 UNIQUE (OBJECT_ID_CLASS, OBJECT_ID_IDENTITY);

CREATE TABLE ACL_ENTRY
(ID BIGSERIAL NOT NULL,
GRANTING BOOLEAN NOT NULL,
ACE_ORDER INTEGER,
AUDIT_SUCCESS BOOLEAN NOT NULL,
MASK INTEGER NOT NULL,
AUDIT_FAILURE BOOLEAN NOT NULL,
ACL_OBJECT_IDENTITY BIGINT NOT NULL REFERENCES ACL_OBJECT_IDENTITY(ID),
SID BIGINT NOT NULL REFERENCES ACL_SID(ID),
PRIMARY KEY (ID));

CREATE INDEX IX_ACL_ENTRY_UNQ_ACL_ENTRY_0 ON ACL_ENTRY (ACL_OBJECT_IDENTITY, ACE_ORDER);
ALTER TABLE ACL_ENTRY ADD CONSTRAINT UNQ_ACL_ENTRY_0 UNIQUE (ACL_OBJECT_IDENTITY, ACE_ORDER);

CREATE TABLE ROLE
(ID BIGSERIAL NOT NULL,
LONG_NAME VARCHAR(255),
SHORT_NAME VARCHAR(255),
PRIMARY KEY (ID));

ALTER TABLE ROLE ADD CONSTRAINT UNQ_ROLE_1 UNIQUE (SHORT_NAME);
CREATE INDEX IX_ROLE_UNQ_ROLE_1 ON ROLE (SHORT_NAME);

CREATE TABLE ATTRIBUTE_DESCRIPTOR
(ID BIGSERIAL NOT NULL,
TYPE VARCHAR(50),
PRECISION INTEGER DEFAULT 2,
DESCRIPTION VARCHAR(255),
SORT_ORDER INTEGER,
NAME VARCHAR(255),
VALUETYPE VARCHAR(255),
PRIMARY KEY (ID));

CREATE TABLE ATTRIBUTE_ENUM_VALUE
(ID BIGSERIAL NOT NULL,
SORT_ORDER INTEGER,
VALUE VARCHAR(255),
DESCRIPTOR_ID BIGINT REFERENCES ATTRIBUTE_DESCRIPTOR(ID),
PRIMARY KEY (ID));


CREATE TABLE USERS
(ID BIGSERIAL NOT NULL,
MIDDLE_NAME VARCHAR(255),
LAST_NAME VARCHAR(255),
EMAIL_ADDRESS VARCHAR(255),
CONTACT_PHONE_NUMBER VARCHAR(255),
PASSWORD VARCHAR(255),
USERNAME VARCHAR(255),
ACTIVE BOOLEAN,
FIRST_NAME VARCHAR(255),
CONFIRMED_REGISTRATION BOOLEAN,
REG_TOKEN VARCHAR(255),
PRIMARY KEY (ID));

CREATE INDEX IX_USERS_UNQ_USERS_1 ON USERS (USERNAME);
ALTER TABLE USERS ADD CONSTRAINT UNQ_USERS_1 UNIQUE (USERNAME);

CREATE TABLE COMPANY
(ID BIGSERIAL NOT NULL,
ADDRESS_ONE VARCHAR(255),
ADDRESS_TWO VARCHAR(255),
POSTAL_CODE VARCHAR(255),
STATE VARCHAR(255),
COMPANY_NAME VARCHAR(255),
CITY VARCHAR(255),
COUNTRY VARCHAR(255),
PRIMARY KEY (ID));

CREATE TABLE USER_COMPANY_ROLE
(ID BIGSERIAL NOT NULL,
ROLE_FK BIGINT NOT NULL REFERENCES ROLE(ID),
COMPANY_FK BIGINT NOT NULL REFERENCES COMPANY(ID),
USER_FK BIGINT NOT NULL REFERENCES USERS(ID),
PRIMARY KEY (ID));

CREATE TABLE USER_INVITE
(ID BIGSERIAL NOT NULL,
MIDDLE_NAME VARCHAR(255),
LAST_NAME VARCHAR(255),
EMAIL_ADDRESS VARCHAR(255),
CONTACT_PHONE_NUMBER VARCHAR(255),
FIRST_NAME VARCHAR(255),
REGISTRATION_TOKEN VARCHAR(255),
COMPANY_FK BIGINT NOT NULL REFERENCES COMPANY(ID),
PRIMARY KEY (ID));

CREATE TABLE CLIENT_USER_CONTACT
(ID BIGSERIAL NOT NULL,
MIDDLE_NAME VARCHAR(255),
LAST_NAME VARCHAR(255),
EMAIL_ADDRESS VARCHAR(255),
CONTACT_PHONE_NUMBER VARCHAR(255),
FIRST_NAME VARCHAR(255),
PRIMARY KEY (ID));

CREATE TABLE CLIENT_COMPANY
(ID BIGSERIAL NOT NULL,
ADDRESS_TWO VARCHAR(255),
POSTAL_CODE VARCHAR(255),
ADDRESS_ONE VARCHAR(255),
STATE VARCHAR(255),
COMPANY_NAME VARCHAR(255),
CITY VARCHAR(255),
COUNTRY VARCHAR(255),
CLIENT_USER_CONTACT_FK BIGINT NOT NULL REFERENCES CLIENT_USER_CONTACT(ID),
PARENT_COMPANY_FK BIGINT NOT NULL REFERENCES COMPANY(ID),
PRIMARY KEY (ID));

CREATE TABLE PROJECT
(ID BIGSERIAL NOT NULL,
START_DATE DATE,
PROJECT_NAME VARCHAR(255),
END_DATE DATE,
CODE VARCHAR(255),
PARENT_COMPANY_FK BIGINT NOT NULL REFERENCES COMPANY(ID),
CLIENT_COMPANY_FK BIGINT NOT NULL REFERENCES CLIENT_COMPANY(ID),
PRIMARY KEY (ID));


CREATE TABLE PROJECT_PARTICIPANTS
(USER_ID BIGSERIAL NOT NULL REFERENCES USERS(ID),
PROJECT_ID BIGINT NOT NULL REFERENCES PROJECT(ID),
PRIMARY KEY (USER_ID, PROJECT_ID));

CREATE TABLE PROJECT_TYPE
(ID BIGSERIAL NOT NULL,
TYPE VARCHAR(255),
PRIMARY KEY (ID));

CREATE TABLE PROJECT_APPROVERS
(USER_ID BIGSERIAL NOT NULL REFERENCES USERS(ID),
PROJECT_ID BIGINT NOT NULL REFERENCES PROJECT(ID),
PRIMARY KEY (USER_ID, PROJECT_ID));


CREATE TABLE PAYMENT_METHOD
(ID BIGSERIAL NOT NULL,
TYPE VARCHAR(31),
DESCRIPTION VARCHAR(255),
NAME VARCHAR(255),
PRIMARY KEY (ID));

CREATE TABLE STANDARD_PAYMENT_METHOD
(ID BIGINT NOT NULL REFERENCES PAYMENT_METHOD(ID),
PRIMARY KEY (ID));

CREATE TABLE PROJECT_PAYMENT_METHOD
(ID BIGINT NOT NULL REFERENCES PAYMENT_METHOD(ID),
PROJECT_FK BIGINT NOT NULL REFERENCES PROJECT(ID),
PRIMARY KEY (ID));

CREATE TABLE COMPANY_PAYMENT_METHOD
(ID BIGINT NOT NULL REFERENCES PAYMENT_METHOD(ID),
COMPANY_FK BIGINT NOT NULL REFERENCES COMPANY(ID),
PRIMARY KEY (ID));

CREATE TABLE EXPENSE_ITEM_TYPE
(ID BIGSERIAL NOT NULL,
TYPE VARCHAR(50),
NAME VARCHAR(255),
DESCRIPTION VARCHAR(255),
SORT_ORDER INTEGER,
PRIMARY KEY (ID));

CREATE TABLE COMPANY_EXPENSE_ITEM_TYPE
(ID BIGINT NOT NULL REFERENCES EXPENSE_ITEM_TYPE(ID),
COMPANY_FK BIGINT NOT NULL REFERENCES COMPANY(ID),
PRIMARY KEY (ID));

CREATE TABLE STANDARD_EXPENSE_ITEM_TYPE
(ID BIGINT NOT NULL REFERENCES EXPENSE_ITEM_TYPE(ID),
PRIMARY KEY (ID));

CREATE TABLE EXPENSE_ITEM_DESCRIPTOR
(ID BIGINT NOT NULL REFERENCES ATTRIBUTE_DESCRIPTOR(ID),
EXPENSE_ITEM_TYPE_FK BIGINT NOT NULL REFERENCES EXPENSE_ITEM_TYPE(ID));

CREATE TABLE EXPENSE_REPORT
(ID BIGSERIAL NOT NULL,
STATE_DATE DATE,
LOCATION VARCHAR(255),
END_DATE DATE,
PURPOSE VARCHAR(255),
OWNER_FK BIGINT REFERENCES USERS(ID),
PROJECT_FK BIGINT REFERENCES PROJECT(ID),
STATUS VARCHAR(20) NOT NULL default 'OPEN',
PRIMARY KEY (ID));

CREATE TABLE EXPENSE_REPORT_ITEM
(ID BIGSERIAL NOT NULL,
AMOUNT DECIMAL(38, 2),
EXPENSE_DATE DATE,
COMMENT VARCHAR(255),
EXPENSE_REPORT_FK BIGINT NOT NULL REFERENCES EXPENSE_REPORT(ID),
EXPENSE_ITEM_TYPE_FK BIGINT REFERENCES EXPENSE_ITEM_TYPE(ID),
PAYMENT_METHOD_FK BIGINT REFERENCES PAYMENT_METHOD(ID),
PROJECT_TYPE_FK BIGINT REFERENCES PROJECT_TYPE(ID),
PRIMARY KEY (ID));

CREATE TABLE EXPENSE_ITEM_VALUE
(ID BIGSERIAL NOT NULL,
STRING_VALUE VARCHAR(255),
PARTITION_DATE DATE NOT NULL,
ENUMERATED_VALUE_ID BIGINT REFERENCES ATTRIBUTE_ENUM_VALUE(ID),
EXPENSE_ITEM_FK BIGINT NOT NULL REFERENCES EXPENSE_REPORT_ITEM(ID),
DESCRIPTOR_ID BIGINT NOT NULL REFERENCES ATTRIBUTE_DESCRIPTOR(ID),
PRIMARY KEY (ID));

CREATE TABLE EXPENSE_ITEM_VALUE_YY10MM01 (
    CHECK ( PARTITION_DATE >= DATE '2010-01-01' AND PARTITION_DATE < DATE '2010-06-01' )
) INHERITS (EXPENSE_ITEM_VALUE);

CREATE INDEX EXPENSE_ITEM_VALUE_YY10MM01_PARTITION_DATE ON EXPENSE_ITEM_VALUE_YY10MM01(PARTITION_DATE);
CREATE INDEX EXPENSE_ITEM_VALUE_YY10MM01_EXPENSE_ITEM_ID ON EXPENSE_ITEM_VALUE_YY10MM01(EXPENSE_ITEM_FK);

CREATE RULE EXPENSE_ITEM_VALUE_INSERT_YY10MM01 AS
ON INSERT TO EXPENSE_ITEM_VALUE WHERE
    ( PARTITION_DATE >= DATE '2010-01-01' AND PARTITION_DATE < DATE '2010-06-01' )
DO INSTEAD
    INSERT INTO EXPENSE_ITEM_VALUE_YY10MM01 VALUES ( NEW.ID, NEW.STRING_VALUE, NEW.PARTITION_DATE, NEW.ENUMERATED_VALUE_ID, NEW.EXPENSE_ITEM_FK, NEW.DESCRIPTOR_ID);

CREATE TABLE EXPENSE_ITEM_VALUE_YY10MM06 (
    CHECK ( PARTITION_DATE >= DATE '2010-06-01' AND PARTITION_DATE < DATE '2011-01-01' )
) INHERITS (EXPENSE_ITEM_VALUE);

CREATE INDEX EXPENSE_ITEM_VALUE_YY10MM06_PARTITION_DATE ON EXPENSE_ITEM_VALUE_YY10MM06(PARTITION_DATE);
CREATE INDEX EXPENSE_ITEM_VALUE_YY10MM06_EXPENSE_ITEM_ID ON EXPENSE_ITEM_VALUE_YY10MM06(EXPENSE_ITEM_FK);

CREATE RULE EXPENSE_ITEM_VALUE_INSERT_YY10MM06 AS
ON INSERT TO EXPENSE_ITEM_VALUE WHERE
    ( PARTITION_DATE >= DATE '2010-06-01' AND PARTITION_DATE < DATE '2011-01-01' )
DO INSTEAD
    INSERT INTO EXPENSE_ITEM_VALUE_YY10MM06 VALUES ( NEW.ID, NEW.STRING_VALUE, NEW.PARTITION_DATE, NEW.ENUMERATED_VALUE_ID, NEW.EXPENSE_ITEM_FK, NEW.DESCRIPTOR_ID);

CREATE TABLE EXPENSE_ITEM_VALUE_YY11MM01 (
    CHECK ( PARTITION_DATE >= DATE '2011-01-01' AND PARTITION_DATE < DATE '2011-06-01' )
) INHERITS (EXPENSE_ITEM_VALUE);

CREATE INDEX EXPENSE_ITEM_VALUE_YY11MM01_PARTITION_DATE ON EXPENSE_ITEM_VALUE_YY11MM01(PARTITION_DATE);
CREATE INDEX EXPENSE_ITEM_VALUE_YY11MM01_EXPENSE_ITEM_ID ON EXPENSE_ITEM_VALUE_YY11MM01(EXPENSE_ITEM_FK);

CREATE RULE EXPENSE_ITEM_VALUE_INSERT_YY11MM01 AS
ON INSERT TO EXPENSE_ITEM_VALUE WHERE
    ( PARTITION_DATE >= DATE '2011-01-01' AND PARTITION_DATE < DATE '2011-06-01' )
DO INSTEAD
    INSERT INTO EXPENSE_ITEM_VALUE_YY11MM01 VALUES ( NEW.ID, NEW.STRING_VALUE, NEW.PARTITION_DATE, NEW.ENUMERATED_VALUE_ID, NEW.EXPENSE_ITEM_FK, NEW.DESCRIPTOR_ID);

CREATE TABLE EXPENSE_ITEM_VALUE_YY11MM06 (
    CHECK ( PARTITION_DATE >= DATE '2011-06-01' AND PARTITION_DATE < DATE '2012-01-01' )
) INHERITS (EXPENSE_ITEM_VALUE);

CREATE INDEX EXPENSE_ITEM_VALUE_YY11MM06_PARTITION_DATE ON EXPENSE_ITEM_VALUE_YY11MM06(PARTITION_DATE);
CREATE INDEX EXPENSE_ITEM_VALUE_YY11MM06_EXPENSE_ITEM_ID ON EXPENSE_ITEM_VALUE_YY11MM06(EXPENSE_ITEM_FK);

CREATE RULE EXPENSE_ITEM_VALUE_INSERT_YY11MM06 AS
ON INSERT TO EXPENSE_ITEM_VALUE WHERE
    ( PARTITION_DATE >= DATE '2011-06-01' AND PARTITION_DATE < DATE '2012-01-01' )
DO INSTEAD
    INSERT INTO EXPENSE_ITEM_VALUE_YY11MM06 VALUES ( NEW.ID, NEW.STRING_VALUE, NEW.PARTITION_DATE, NEW.ENUMERATED_VALUE_ID, NEW.EXPENSE_ITEM_FK, NEW.DESCRIPTOR_ID);

<?xml version="1.0" encoding="utf-8"?>
<views:BaseNETSView 
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:views="com.neosavvy.views.*"
	title="DashboardView" >
	<views:layout>
		<s:VerticalLayout/>
	</views:layout>


	<fx:Script>
		<![CDATA[
			import com.neosavvy.Constants;
			import com.neosavvy.model.SessionState;
			
			import fineline.focal.common.types.v1.StorageServiceFileRef;
			
			import mx.graphics.codec.PNGEncoder;
			import mx.messaging.ChannelSet;
			import mx.messaging.channels.AMFChannel;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.remoting.RemoteObject;
			
			import spark.components.Image;
			
			private var mpLoader : Loader;
			
			private var imageDisplay : Image;
			
			private function onLaunchCameraUI(e:Event):void
			{
				var cameraUI:CameraUI = new CameraUI();
				cameraUI.addEventListener(MediaEvent.COMPLETE, onCameraUIComplete);
				//cameraUI.addEventListener(Event.CANCEL, onCameraUICanceled);
				//cameraUI.addEventListener(ErrorEvent.ERROR, onCameraError);
				cameraUI.launch(MediaType.IMAGE);
			}
			
			private function onCameraUIComplete(e:MediaEvent):void
			{
				var cameraUI:CameraUI = e.target as CameraUI;
				cameraUI.removeEventListener(MediaEvent.COMPLETE, onCameraUIComplete);
				//cameraUI.removeEventListener(Event.CANCEL, onCameraUICanceled);
				//cameraUI.removeEventListener(ErrorEvent.ERROR, onCameraError);
				
				var mediaPromise:MediaPromise = e.data;
				
				this.mpLoader = new Loader();
				this.mpLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, onMediaPromiseLoaded);
				//this.mpLoader.addEventListener(IOErrorEvent.IO_ERROR, onMediaPromiseLoadError);
				this.mpLoader.loadFilePromise(mediaPromise);
			}
			
			private function onMediaPromiseLoaded(e:Event):void
			{
				var mpLoaderInfo:LoaderInfo = e.target as LoaderInfo;
				mpLoaderInfo.removeEventListener(Event.COMPLETE, onMediaPromiseLoaded);
				
				
				var bitmap:BitmapData = (mpLoaderInfo.content as Bitmap).bitmapData;
				var png:PNGEncoder = new PNGEncoder();
				var byteArray:ByteArray = png.encode(bitmap);
				//mpLoaderInfo.loader.removeEventListener(IOErrorEvent.IO_ERROR, onMediaPromiseLoadError);
				
				var temp : File = new File(File.applicationStorageDirectory.nativePath + File.separator + "nets-mobile.png");  //Creates a new temp file
				
				var fs : FileStream = new FileStream();
				fs.open( temp, FileMode.WRITE )
				fs.writeBytes( byteArray );
				
				var uploadUrl:String = Constants.MOBILE_URL + (data as SessionState).securityWrapper.sessionId;	
				var urlRequest : URLRequest = new URLRequest(uploadUrl);
				urlRequest.method = URLRequestMethod.POST;
				urlRequest.contentType = "text/xml";
				
				var fileReference : FileReference = FileReference( temp );
				fileReference.upload( urlRequest ); 
				fileReference.addEventListener( DataEvent.UPLOAD_COMPLETE_DATA, upCompleteHandler );
				fileReference.addEventListener( IOErrorEvent.IO_ERROR, upIoErrorHandler ); 
				fileReference.addEventListener( ProgressEvent.PROGRESS, progressHandler );
				
				uploadProgressManager = new UploadProgressManager();
				uploadProgressManager.startProgress( this );
				
				
			}
			
			
			protected function captureReceiptClicked(event:MouseEvent):void
			{
				if( CameraUI.isSupported )
				{
					var cameraUI : CameraUI = new CameraUI();
					
					cameraUI.addEventListener(MediaEvent.COMPLETE, imageComplete); 
					cameraUI.launch( MediaType.IMAGE );
				}
			}
			
			private var reference : File;
			private var uploadProgressManager : UploadProgressManager;
			
			protected function imageComplete( event : MediaEvent ) : void
			{
				var media : MediaPromise = event.data;
				var url : String = media.file.url;
				trace("complete: " + url);	
				reference = new File(url);
				
				var uploadUrl:String = Constants.MOBILE_URL + (data as SessionState).securityWrapper.sessionId;	
				var urlRequest : URLRequest = new URLRequest(uploadUrl);
				urlRequest.method = URLRequestMethod.POST;
				urlRequest.contentType = "text/xml";
				
				var fileReference : FileReference = FileReference( reference );
				fileReference.upload( urlRequest ); 
				fileReference.addEventListener( DataEvent.UPLOAD_COMPLETE_DATA, upCompleteHandler );
				fileReference.addEventListener( IOErrorEvent.IO_ERROR, upIoErrorHandler ); 
				fileReference.addEventListener( ProgressEvent.PROGRESS, progressHandler );
				
				uploadProgressManager = new UploadProgressManager();
				uploadProgressManager.startProgress( this );
			}
			
			protected function upCompleteHandler(event:DataEvent):void
			{
				trace("Successfully uploaded the file...");
				var xmlData : XML = XML(event.data as String);
				var storageFileRef : StorageServiceFileRef  = createStorageServiceFileRef( xmlData );
				
				var userService : RemoteObject = new RemoteObject("userService");
				
				var channelSet : ChannelSet = new ChannelSet();
				var channel:AMFChannel = new AMFChannel("user-amf");
				channel.url = Constants.AMF_URL;
				channelSet.addChannel(channel);
				
				userService.channelSet = channelSet; 
				userService.addEventListener(ResultEvent.RESULT, handleAssociationComplete );
				userService.addEventListener(FaultEvent.FAULT, handleAssociationFault );
				userService.associateReceiptUploadWithUser( (data as SessionState).user , storageFileRef );
				
				
			} 
			
			protected function upIoErrorHandler(event:Event):void
			{
				trace("upload failed");
			}
			
			
			private function progressHandler(event:ProgressEvent):void
			{
				trace("Progress", event.bytesLoaded, event.bytesTotal);
				uploadProgressManager.updateProgress( event.bytesLoaded, event.bytesTotal );
			}
			
			private function uploadCompleteHandler(event:Event):void
			{
				trace("complete");
			} 
			
			protected function handleAssociationComplete(event:ResultEvent):void
			{
				trace("Associated the receipt with a user...");
				uploadProgressManager.progressComplete();
			}
			
			
			protected function handleAssociationFault(event:FaultEvent):void
			{
				trace("Failed to associate the receipt with a user...");
			}
			
			protected function createStorageServiceFileRef(xml:XML):StorageServiceFileRef {
				
				var fileRef:StorageServiceFileRef = new StorageServiceFileRef();
				fileRef.id = xml.id;
				fileRef.bucket = xml.bucket;
				fileRef.key = xml.key;
				fileRef.fileName = xml.fileName;
				fileRef.location = xml.location;
				fileRef.fileSize = Number(xml.@fileSize.toString());
				fileRef.owner = xml.owner;
				fileRef.lastModifiedDate = parseXmlDateTime( xml.@lastModifiedDate );
				return fileRef;
			} 
			
			public function parseXmlDateTime(dateStr:String):Date {
				var date:String = dateStr;
				var time:String = '00:00:00';
				var timeZone:String = '0000';
				var i:int = dateStr.indexOf('T');
				if (i > 0) {
					date = dateStr.substring(0, i);
					var timeAndZone:String = dateStr.substring(i + 1);
					i = timeAndZone.indexOf('-');
					if (i == -1) {
						i = timeAndZone.indexOf('+');
					}
					if (i > 0) {
						time = timeAndZone.substring(0, i);
						timeZone = timeAndZone.substring(i + 1);
					}
					else {
						time = timeAndZone;
					}
					
					i = time.indexOf('.');
					if (i > 0) {
						time = time.substring(0, i);
					}
				}
				date = date.replace(/-/g, "/");
				timeZone = timeZone.replace(":", "");
				const val:Number = Date.parse(date + " " + time + " GMT-" + timeZone);
				
				if (!val || val < 0)
				{
					return null;
				}
				else
				{
					return new Date(val);
				} 
			}
			
		]]>
	</fx:Script>

	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<s:Button width="100%" label="Capture Receipt" click="onLaunchCameraUI(event)"/>
</views:BaseNETSView>

<%--
  GRANITE DATA SERVICES
  Copyright (C) 2007-2008 ADEQUATE SYSTEMS SARL

  This file is part of Granite Data Services.

  Granite Data Services is free software; you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation; either version 3 of the License, or (at your
  option) any later version.

  Granite Data Services is distributed in the hope that it will be useful, but
  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License
  for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with this library; if not, see <http://www.gnu.org/licenses/>.

  @author Franck WOLFF
--%><%
import flex.messaging.annotations.*;

    Set as3Imports = new TreeSet();

    as3Imports.add("flash.utils.IDataInput");
    as3Imports.add("flash.utils.IDataOutput");

    for (jImport in jClass.imports) {
        if (jImport.as3Type.hasPackage() && jImport.as3Type.packageName != jClass.as3Type.packageName)
            as3Imports.add(jImport.as3Type.qualifiedName);
    }
    for (jProperty in jClass.interfacesProperties) {
            if (jProperty.as3Type.hasPackage() && jProperty.as3Type.packageName != jClass.as3Type.packageName)
                as3Imports.add(jProperty.as3Type.qualifiedName);
    }

%>/**
 * Generated by Gas3 v${gVersion} (Granite Data Services).
 *
 * WARNING: DO NOT CHANGE THIS FILE. IT MAY BE OVERRIDDEN EACH TIME YOU USE
 * THE GENERATOR. CHANGE INSTEAD THE INHERITED CLASS (${jClass.as3Type.name}.as).
 */

package ${jClass.as3Type.packageName} {
<%
///////////////////////////////////////////////////////////////////////////////
// Write Import Statements.
    for (as3Import in as3Imports) {%>
    import ${as3Import};<%
    }


///////////////////////////////////////////////////////////////////////////////
// Write Class Declaration.%>

    [Bindable]
    public class ${jClass.as3Type.name}Base<%

        boolean implementsWritten = false;
        if (jClass.hasSuperclass()) {
            %> extends ${jClass.superclass.as3Type.name}<%
        } else {
        }

        for (jInterface in jClass.interfaces) {
            if (!implementsWritten) {
                %> implements ${jInterface.as3Type.name}<%

                implementsWritten = true;
            } else {
                %>, ${jInterface.as3Type.name}<%
            }
        }

    %> {
<%

    ///////////////////////////////////////////////////////////////////////////
    // Write Private Fields.

    for (jProperty in jClass.properties) {
        if (jProperty.readable || jProperty.writable) {
            if (jProperty.as3Type.isNumber() && !jProperty.type.isPrimitive()) {
              %>
        private var _${jProperty.name}:Object;<%
            }
            else {
                %>
        private var _${jProperty.name}:${jProperty.as3Type.name};<%                
            }
        }
    }

    ///////////////////////////////////////////////////////////////////////////
    // Write Constructor
    %>
        public function ${jClass.as3Type.name}Base() {}
    <%    
    ///////////////////////////////////////////////////////////////////////////
    // Write Public Getter/Setter.

    for (jProperty in jClass.properties) {
        if (jProperty.readable) {%>
<%
            if (jProperty.as3Type.isNumber() && !jProperty.type.isPrimitive()) { %>
        public function set ${jProperty.name}(objValue:Object):void {
            if ((objValue is String && String(objValue).length == 0) || (objValue is Number && isNaN(objValue as Number))) {
                _${jProperty.name} = null;
            }
            else {
              _${jProperty.name} = objValue;
            }
        }
        public function get ${jProperty.name}():Object {
            return _${jProperty.name};
        }
        public function set ${jProperty.name}Number(objValue:Number):void {
            if (isNaN(objValue)) {
                ${jProperty.name} = null;
            }
            else {
                ${jProperty.name} = objValue;
            }
        }
        public function get ${jProperty.name}Number():Number {
          if (_${jProperty.name} != null) {
            return Number(_${jProperty.name});
          }
          
          return NaN;
        }<%
                
            }
            else { %>
        public function set ${jProperty.name}(objValue:${jProperty.as3Type.name}):void {
            _${jProperty.name} = objValue;
        }
        public function get ${jProperty.name}():${jProperty.as3Type.name} {
            return _${jProperty.name};
        }<%                
            }
        }
    }

    ///////////////////////////////////////////////////////////////////////////
    // Write Public Getters/Setters for Implemented Interfaces.

    if (jClass.hasInterfaces()) {
        for (jProperty in jClass.interfacesProperties) {
            if (jProperty.readable || jProperty.writable) {%>
<%
                if (jProperty.writable) {
                    if (jProperty.as3Type.isNumber() && !jProperty.type.isPrimitive()) { %>
        public function set ${jProperty.name}(objValue:Object):void {
        }<%
                    }
                    else { %>
        public function set ${jProperty.name}(objValue:${jProperty.as3Type.name}):void {
        }<%
                    }

                }
                if (jProperty.readable) {
                    if (jProperty.as3Type.isNumber() && !jProperty.type.isPrimitive()) { %>
        public function get ${jProperty.name}():Object {
            return null;
        } <%
                    }
                    else { %>
        public function get ${jProperty.name}():${jProperty.as3Type.name} {
            return ${jProperty.as3Type.nullValue};
        } <%
                    }
                }
            }
        }
    } %> 
      
    
    }

}

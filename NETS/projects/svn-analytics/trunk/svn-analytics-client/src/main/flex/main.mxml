<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="vertical" creationComplete="{init()}">
	
	
	<mx:Script>
		<![CDATA[
			import com.neosavvy.svn.analytics.dto.request.RefineSearchRequest;
			import flash.utils.getTimer;
			import mx.collections.ArrayCollection;
			import mx.rpc.events.ResultEvent;
			import mx.messaging.ChannelSet;
			import mx.messaging.channels.AMFChannel;
			import mx.controls.Alert;
			import mx.rpc.remoting.mxml.RemoteObject;
			import mx.rpc.events.FaultEvent;
	
		    [Bindable]
		    private var svnStatService:RemoteObject;
            
            [Bindable]
            private var historicalService:RemoteObject;

            [Bindable]
            private var authorService:RemoteObject;

			[Bindable]
            private var svnIntervalService:RemoteObject;

			[Bindable]
            private var svnRefineOverallService:RemoteObject;

			[Bindable]
            private var svnRefineHistoryService:RemoteObject;

            [Bindable]
            private var stats:Array = new Array();
            
            [Bindable]
            private var historicalStats:Array = new Array();

            [Bindable]
            private var authors:Array = new Array();
            
			public function faultHandler (event:FaultEvent):void {
				Alert.show(event.fault.faultString, 'Error');
				trace("Fault: " + event.fault.faultCode);
				trace("FaultDetail: " + event.fault.faultDetail);
				trace("FaultString: " + event.fault.faultString);
			}

			public function init():void {
				getAuthors();
				getTeamStats();
				getHistoricalStats();
				getSvnRepositoryInterval();
			}
			
			public function getTeamStats():void {
                /* var channel:AMFChannel = new AMFChannel("svn-analytics-amf", "http://sv-scratchy.roundarch.com:9080/svn-analytics/messagebroker/amf");
	            
	            var channelSet:ChannelSet = new ChannelSet();
	            channelSet.addChannel(channel); */
	            
	            svnStatService = new RemoteObject();
	            svnStatService.destination = "svnStatService";
/* 	            svnStatService.channelSet = channelSet; */
	            svnStatService.addEventListener(FaultEvent.FAULT, faultHandler);
	            svnStatService.addEventListener(ResultEvent.RESULT, team_resultHandler);
	            
	            svnStatService.getOverallTeamStatistics();
			}
			
			
            public function team_resultHandler( object:Object ) :void {
                
                var data:ResultEvent = object as ResultEvent;
                stats = data.result as Array;
                
                
            }
			
			public function getHistoricalStats():void {
                
                /* var channel:AMFChannel = new AMFChannel("svn-analytics-amf", "http://sv-scratchy.roundarch.com:9080/svn-analytics/messagebroker/amf");
	            
	            var channelSet:ChannelSet = new ChannelSet();
	            channelSet.addChannel(channel); */
                
                historicalService = new RemoteObject();
                /* historicalService.channelSet = channelSet; */
                historicalService.destination = "svnStatService";
                historicalService.addEventListener(FaultEvent.FAULT, faultHandler);
                historicalService.addEventListener(ResultEvent.RESULT, historical_resultHandler);
                
                historicalService.getHistoricalTeamStatistics();	
			}
			
			public function historical_resultHandler( object:Object ) :void {
                
                var data:ResultEvent = object as ResultEvent;
                historicalStats = data.result as Array;
                
            }
            
            public function getAuthors():void {
            	
            	/* var channel:AMFChannel = new AMFChannel("svn-analytics-amf", "http://sv-scratchy.roundarch.com:9080/svn-analytics/messagebroker/amf");
	            
	            var channelSet:ChannelSet = new ChannelSet();
	            channelSet.addChannel(channel); */
            	
                authorService = new RemoteObject();
                /* authorService.channelSet = channelSet; */
                authorService.destination = "svnStatService";
                authorService.addEventListener(FaultEvent.FAULT, faultHandler);
                authorService.addEventListener(ResultEvent.RESULT, author_resultHandler);
                
                authorService.getAuthors();    
            }
            
            public function author_resultHandler( object:Object ):void {
            	
            	var data:ResultEvent = object as ResultEvent;
            	authors = data.result as Array;
            }
            
            public function getSvnRepositoryInterval():void {
            	/* var channel:AMFChannel = new AMFChannel("svn-analytics-amf", "http://sv-scratchy.roundarch.com:9080/svn-analytics/messagebroker/amf");
	            
	            var channelSet:ChannelSet = new ChannelSet();
	            channelSet.addChannel(channel); */
            	
                svnIntervalService = new RemoteObject();
                /* svnIntervalService.channelSet = channelSet; */
                svnIntervalService.destination = "svnStatService";
                svnIntervalService.addEventListener(FaultEvent.FAULT, faultHandler);
                svnIntervalService.addEventListener(ResultEvent.RESULT, interval_resultHandler);
                
                svnIntervalService.getRepositoryInterval();    
            }
            
            public function interval_resultHandler( object:Object ):void {
            	
            	var data:ResultEvent = object as ResultEvent;
            	
            	var startDateFromService:Date = data.result.startDayLevelDate as Date;
            	var endDateFromService:Date = data.result.endDayLevelDate as Date;
            	
            	startDate.selectedDate = startDateFromService;
            	startDate.selectableRange = {rangeStart: startDateFromService, rangeEnd: endDateFromService};

            	endDate.selectedDate = endDateFromService
            	startDate.selectableRange = {rangeStart: startDateFromService, rangeEnd: endDateFromService};
            	
            }
            
            public function refineSearch() : void {
            	
            	/* var channel:AMFChannel = new AMFChannel("svn-analytics-amf", "http://sv-scratchy.roundarch.com:9080/svn-analytics/messagebroker/amf");
	            
	            var channelSet:ChannelSet = new ChannelSet();
	            channelSet.addChannel(channel); */
            	
            	var refineRequest:RefineSearchRequest = new RefineSearchRequest();
            	refineRequest.userNames = [authorsSelector.selectedItem.author];
            	refineRequest.startDate = startDate.selectedDate;
            	refineRequest.endDate = endDate.selectedDate;
            	
                svnRefineOverallService = new RemoteObject();
                /* svnRefineOverallService.channelSet = channelSet; */
                svnRefineOverallService.destination = "svnStatService";
                svnRefineOverallService.addEventListener(FaultEvent.FAULT, faultHandler);
                svnRefineOverallService.addEventListener(ResultEvent.RESULT, team_resultHandler);
                
                svnRefineOverallService.getRefinedTeamStatistics(refineRequest);    
                
                svnRefineHistoryService = new RemoteObject();
                /* svnRefineHistoryService.channelSet = channelSet; */
                svnRefineHistoryService.destination = "svnStatService";
                svnRefineHistoryService.addEventListener(FaultEvent.FAULT, faultHandler);
                svnRefineHistoryService.addEventListener(ResultEvent.RESULT, historical_resultHandler);
                
                svnRefineHistoryService.getRefinedHistoricalTeamStatistics(refineRequest);    
            }
			
			
		]]>
	</mx:Script>
	
	<mx:HBox backgroundColor="0xFFFFFF" width="100%" height="15%" verticalAlign="middle">
		<mx:ComboBox id="authorsSelector" dataProvider="{authors}" labelField="author"/>
		<mx:DateField id="startDate"/>
		<mx:DateField id="endDate"/>
		
		<mx:Button label="Refine Search" click="{refineSearch()}"/>
	</mx:HBox>
	
	<mx:VBox backgroundColor="0xFFFFFF" width="100%" height="70%">
		<mx:LineChart id="lineChart" showDataTips="true" dataProvider="{historicalStats}" width="100%" height="100%">
			<mx:horizontalAxis>
	           <mx:CategoryAxis 
	                dataProvider="{historicalStats}" 
	                categoryField="revisionDate"
	            />
	        </mx:horizontalAxis>
	        <mx:series>
	           <mx:LineSeries 
	                yField="numberfOfFiles" 
	                displayName="Files"
	                form="curve">
	                <mx:lineStroke>
	                <mx:Stroke 
	                    color="0xCC00FF" 
	                    weight="2" 
	                />
	            </mx:lineStroke>
                </mx:LineSeries>
	           <mx:LineSeries 
                    yField="numberOfFilesAdded" 
                    displayName="Added"
                    form="curve">
                    <mx:lineStroke>
	                <mx:Stroke 
	                    color="0xFF007F" 
	                    weight="2" 
	                />
	            </mx:lineStroke>
                </mx:LineSeries>
               <mx:LineSeries 
                    yField="numberOfFilesDeleted" 
                    displayName="Deleted"
                    form="curve"
               >
               	<mx:lineStroke>
	                <mx:Stroke 
	                    color="0xEE00EE" 
	                    weight="2" 
	                />
	            </mx:lineStroke>
               </mx:LineSeries>
               <mx:LineSeries 
                    yField="numberOfFilesModified" 
                    displayName="Modified">
                    <mx:lineStroke>
	                <mx:Stroke 
	                    color="0xFF0033" 
	                    weight="2" 
	                />
	            </mx:lineStroke>
                </mx:LineSeries>
	        </mx:series>
	     </mx:LineChart>
        <mx:Legend direction="horizontal" dataProvider="{lineChart}"/>
     </mx:VBox>
     

	<mx:AdvancedDataGrid dataProvider="{stats}" width="100%" height="25%"/>
	
</mx:Application>

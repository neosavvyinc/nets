<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:skins="skins.*" 
	xmlns:code="http://code.google.com/p/flexlib/"
	horizontalScrollPolicy="off" verticalScrollPolicy="off" xmlns:chart="com.neosavvy.svn.analytics.components.chart.*">
		<mx:Script>
			<![CDATA[
				import mx.events.SliderEvent;
				import mx.effects.easing.Cubic;
				import mx.events.TweenEvent;
				import mx.events.EffectEvent;
				import mx.effects.Move;
				
			import mx.graphics.SolidColor;
			import mx.graphics.Stroke;
			import mx.controls.Alert;
			import mx.collections.ArrayCollection;
			import mx.rpc.events.AbstractEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
            
            
			[Bindable] private var MAIN_CHART_HEIGHT:Number = 320;
			[Bindable] private var VOLUME_CHART_HEIGHT:Number = 50;
			[Bindable] private var RANGE_CHART_HEIGHT:Number = 80;
			[Bindable] private var CHART_WIDTH:Number = 550;
			
			[Bindable] private var mainData:ArrayCollection = new ArrayCollection();
			
			public function setMainData(value:ArrayCollection) :void {
				this.mainData = value;
			}
			
			public function setRangeData(value:ArrayCollection) :void {
				this.rangeData = value;
			}
			
			public function setRangeDataRatio(value:Number) :void {
				this.rangeDataRatio = value;
			}
			
			public function getRangeData():ArrayCollection {
				return rangeData;
			}
			
            //the full dataset of stock information
            [Bindable] private var rangeData:ArrayCollection = new ArrayCollection();
            
			//static positions of left and right indicators set in setMouseDown and used in moveChart to calulate new positions
			private var staticLeftBoundary:Number;
            private var staticRightBoundary:Number;
            //the static mouse position where we've clicked... used to calculate move differences in moveChart
            private var mouseXRef:Number;
            //flags to determine which chart we've clicked on for the drag... set in setMouseDown used it moveChart
            private var rangeDrag:Boolean = false;
            private var mainDrag:Boolean = false;
            //the ratio between the width of the range control, and the length of the full dataset
            private var rangeDataRatio:Number = 1;
			//enabled when the slider is directly updating the box positions for realtime drag
			//disabled when divider is moved and dropped inside easing effect for delayed move
			private var updateBoxFromSlider:Boolean = false;
			//a flag to allow the updateComplete event on AreaSeries to run only once on startup
			private var allowUpdateComplete:Boolean = false;
			//skins used for scroll button arrows and divider boundar grab points
			[Embed(source="/assets/divider.png")] [Bindable] public var dividerClass:Class;
            [Embed(source="/assets/blank.png")] [Bindable] public var blankDividerClass:Class;
            [Embed(source="/assets/left_scroll.png")] [Bindable] public var leftScroll:Class;
            [Embed(source="/assets/right_scroll.png")] [Bindable] public var rightScroll:Class;
	
			/**
			 * Simple parsing function to convert the date strings in our dataset to the equivalent Date object.
			 */
			private function dateParse(value:String):Date
			{
				if (value) {
					var dateArray:Array = value.split('-');
					if( dateArray.length == 3) {
						return new Date(dateArray[0], dateArray[1] - 1, dateArray[2]);
					} 
					else if (dateArray.length == 2) {
						return new Date(dateArray[0], dateArray[1] - 1, 1);
					} else {
						return null;
					}
				} else { 
					return null;
				}
			}
	            
	        /**
			 * Formats a date object from the DateTimeAxis into a label string
			 */
            private function formatDateLabel(value:Number, prevValue:Number, axis:DateTimeAxis):String
			{
				var dateValue:Date = new Date();
				dateValue.setTime(value + ((dateValue.timezoneOffset + 60) * 60 * 1000));
				switch(axis.labelUnits)
				{
					case "months":
						return labelMonthFormatter.format(dateValue);
						break;
					case "days":
					default:
						return labelDayFormatter.format(dateValue);
						break;
				}
			}
			
			/**
		 * Called from updateComplete on Main chart series... when data is completely loaded, we set the defaults for the sliders and divider
		 * boxes etc... filtered to only run once (allowUpdateComplete) when the application first loads
		 */
			private function seriesComplete():void
			{
				if(mainData.length > 0 && allowUpdateComplete == false)
				{
					allowUpdateComplete = true;
					updateBoxFromSlider = true;
					updateBox();
					this.visible = true;
				}	
			}
					
		/**
		 * Called throughout to update the mainData range of data that is displayed by slicing the 
		 * range data to the left and right values.
		 */
			private function updateMainData():void
            {
                mainData.source = rangeData.source.slice(leftIndicator.x, rightIndicator.x);
            }
			
		/**
		 * Called from the slider value changes.  It is filtered to only change when the slider calling it 
		 * directly.  The updateBoxFromSlider value is set to false when the moveSlider function effect is 
		 * playing because the box widths have already been set by the dividerRelease calling 
		 * updateIndicatorValuesWithEffect.
		 */
			private function updateBox():void
			{
				if(updateBoxFromSlider)
				{
					//setting the box width value to the slider value times the ratio (to decrease 
					//it to the equivalent width percentage
					//eg. full divided box width = 500, rangeDataRatio = 1/5 would equal 100 for the 
					//proper left box width equal to range index value
					leftBox.width = slider.values[0] * rangeDataRatio;
					rightBox.width = dividedBox.width - ( slider.values[1] * rangeDataRatio );
					leftIndicator.x = slider.values[0];
					rightIndicator.x = slider.values[1];
					updateMainData();
				}
			}
			
		/**
		 * Updates the range by moving the entire range left or right by a fixed number of units
		 */
		 	private function clickUpdate(value:int):void
		 	{
		 		leftIndicator.x += value; rightIndicator.x += value;
		 		slider.dispatchEvent(new SliderEvent('change'));
		 	}
			
		/**
		 * Called from the divided box dividerRelease.  Calls a Move for the left and right Indicator 
		 * x values which has an easing function
		 * applied.
		 */
			private function updateIndicatorValuesWithEffect():void
			{
				//setting indicator positions to the box width divided by the ratio (to increase 
				//it to the equivalent range value)
				//eg. left box width = 100, rangeDataRation = 1/5 would equal 500 for the range index value
				moveSlider(leftIndicator, (leftBox.width  / rangeDataRatio), false);
				moveSlider(rightIndicator, ((dividedBox.width - rightBox.width) / rangeDataRatio), false);
				
			}
			
		/**
		 * Called from the thumbRelease on the slider instance, as well as creationComplete 
		 * to set the initial range values.
		 * Updates the left and right indicator x values without the move effect.
		 */
			private function updateIndicatorsQuietly():void
			{
				//these two values are mapped 1:1 as the slider values and indicator values equal the rangeData length exactly
				leftIndicator.x = slider.values[0];
				rightIndicator.x = slider.values[1];
			}
			
		/**
		 * Moves the left and right indicator x values with an easing transition applied.  update 
		 * dictates whether this should update the divided box range measurements (false if we're calling this 
		 * from the divided box release) callbackFunc can be passed to get called when the move is finished.
		 */
			private function moveSlider(target:VRule, xTo:Number, update:Boolean, callbackFunc:Function = null, ... rest):void
			{
				var moveIndicator:Move = new Move();
				moveIndicator.end();
				moveIndicator.easingFunction = Cubic.easeOut;
				moveIndicator.duration = 750;
				moveIndicator.target = target;
				moveIndicator.xTo = xTo;
				moveIndicator.addEventListener(EffectEvent.EFFECT_START, function():void {updateBoxFromSlider = update});
				moveIndicator.addEventListener(TweenEvent.TWEEN_UPDATE, function():void { mainData.source = rangeData.source.slice(leftIndicator.x, rightIndicator.x); 
																						  });
				moveIndicator.addEventListener(EffectEvent.EFFECT_END, function():void {updateBoxFromSlider = true; 
																						if(callbackFunc != null) callbackFunc.call(this, rest)});
				moveIndicator.play();
			}
			
		/**
		 * Called from range chart or main chart and determines the position of the mouse as well as left 
		 * and right indicators (for static comparison when moving) and adds systemManager events
		 * to capture mouse movement.  The values set here are used in the moveChart function to calculate 
		 * new position differences with start position
		 */
			private function setMouseDown(theChart:CartesianChart):void
            {
            	//don't capture for drag if we're viewing the entire range of data
            	if(!(leftIndicator.x == 0 && rightIndicator.x == rangeData.length))
            	{
	            	mouseXRef = this.mouseX;
	                staticLeftBoundary = leftIndicator.x;
	                staticRightBoundary = rightIndicator.x;
	                if(theChart == mainChart) mainDrag = true;
	                if(theChart == intervalChart) rangeDrag = true;
	                this.systemManager.addEventListener(MouseEvent.MOUSE_MOVE, moveChart);
	                this.systemManager.addEventListener(MouseEvent.MOUSE_UP, stopDragging);
            	}
            }
            
		/**
		 * Called when systemManager receives mouseUp event.  Sets the indicators for which range is 
		 * being dragged to false, and removes the system manager event listeners for drag movement.
		 */
            private function stopDragging(event:MouseEvent):void
            {
                rangeDrag = false;
                mainDrag = false;
                this.systemManager.removeEventListener(MouseEvent.MOUSE_MOVE, moveChart);
                this.systemManager.removeEventListener(MouseEvent.MOUSE_UP, stopDragging);
            }
            
		/**
		 * Determines which chart instance is being dragged, and updates the left and right indicator x values
		 */
            private function moveChart(event:MouseEvent):void
            {
                if(mainDrag)
                {
                    leftIndicator.x = staticLeftBoundary + (mouseXRef - this.mouseX) / 
                    									   (mainChartArea.width / mainData.length);
                    rightIndicator.x = staticRightBoundary + (mouseXRef - this.mouseX) / 
                    										 (mainChartArea.width / mainData.length);
                }
                else if(rangeDrag)
                {
                    leftIndicator.x = staticLeftBoundary - (mouseXRef - this.mouseX) / rangeDataRatio;
                    rightIndicator.x = staticRightBoundary - (mouseXRef - this.mouseX) / rangeDataRatio;
                }
            }
            
				
				
			]]>
		</mx:Script>
	     
<!-- main graph -->
		<mx:Canvas id="mainChartContainer" x="0" y="25" width="{CHART_WIDTH}" height="{MAIN_CHART_HEIGHT}" 
				   horizontalScrollPolicy="off" verticalScrollPolicy="off" borderSides="left right top" 
				   styleName="canvasContainerStyles">
				   
			<!-- the bottom bar on which the labels for HAxis get rendered --> 
			<mx:HBox x="0" y="{mainChart.height - 18}" backgroundColor="#CDE2F8" width="100%" height="18" />
			
			<mx:AreaChart id="mainChart" x="-2" y="0" 
						  showDataTips="true" 
						  width="{CHART_WIDTH}" height="{MAIN_CHART_HEIGHT-20}" 
						  dataProvider="{mainData}"
						  styleName="mainChartStyle" backgroundElements="{backgroundContents}">
		        
		        <mx:horizontalAxis>
		        	<mx:DateTimeAxis dataUnits="days" parseFunction="{dateParse}" labelFunction="{formatDateLabel}" />
		        </mx:horizontalAxis>
		        <mx:horizontalAxisRenderer>
		        	<skins:InnerAxisRenderer axisPosition="right" axisWidth="20" 
		        							 axisBackgroundAlpha="1" axisBackgroundColor="#CDE2F8"
		        							 labelAlign="right" 
		        							 labelFontSize="10" labelFontColor="#000000" />
		        </mx:horizontalAxisRenderer>
		        
		        <mx:verticalAxis><mx:LinearAxis baseAtZero="false" /></mx:verticalAxis>
		        <mx:verticalAxisRenderer>
		        	<skins:InnerAxisRenderer axisPosition="right" axisWidth="200" 
		        							 axisBackgroundAlpha="0"
		        							 labelFontSize="10" labelFontColor="#000000" />
		        </mx:verticalAxisRenderer>
		        <mx:series>
		            <mx:AreaSeries id="numberfOfFilesSeries" 
								displayName="Total Files"
								name="close" xField="revisionDate" 
								yField="numberfOfFiles" 
								areaFill="{new SolidColor(0xCDE2F8, 0.20)}"
								areaStroke="{new Stroke(0x0066DD, 1)}"
								fill="{new SolidColor(0x0066DD, 1)}" 
								radius="3" form="segment"
								updateComplete="seriesComplete()"  />
					<mx:AreaSeries id="numberOfFilesModifiedSeries" 
								displayName="Modified"
								name="close" xField="revisionDate" 
								yField="numberOfFilesModified" 
								areaFill="{new SolidColor(0xCDE2F8, 0.20)}"
								areaStroke="{new Stroke(0x0066DD, 1)}"
								fill="{new SolidColor(0x0066DD, 1)}" 
								radius="3" form="segment"
								updateComplete="seriesComplete()"  />
					<mx:AreaSeries id="numberOfFilesAddedSeries" 
								displayName="Added"
								name="close" xField="revisionDate" 
								yField="numberOfFilesAdded" 
								areaFill="{new SolidColor(0xCDE2F8, 0.20)}"
								areaStroke="{new Stroke(0x0066DD, 1)}"
								fill="{new SolidColor(0x0066DD, 1)}" 
								radius="3" form="segment"
								updateComplete="seriesComplete()"  />
					<mx:AreaSeries id="numberOfFilesDeletedSeries" 
								displayName="Deleted"
								name="close" xField="revisionDate" 
								yField="numberOfFilesDeleted" 
								areaFill="{new SolidColor(0xCDE2F8, 0.20)}"
								areaStroke="{new Stroke(0x0066DD, 1)}"
								fill="{new SolidColor(0x0066DD, 1)}" 
								radius="3" form="segment"
								updateComplete="seriesComplete()"  />
					<mx:AreaSeries id="numberOfUnCommentedCommitsSeries" 
								displayName="Uncommented Commits"
								name="close" xField="revisionDate" 
								yField="numberOfUnCommentedCommits" 
								areaFill="{new SolidColor(0xCDE2F8, 0.20)}"
								areaStroke="{new Stroke(0x0066DD, 1)}"
								fill="{new SolidColor(0x0066DD, 1)}" 
								radius="3" form="segment"
								updateComplete="seriesComplete()"  />
					<mx:AreaSeries id="numberOfCommentedCommitsSeries" 
								displayName="Commented Commits"
								name="close" xField="revisionDate" 
								yField="numberOfCommentedCommits" 
								areaFill="{new SolidColor(0xCDE2F8, 0.20)}"
								areaStroke="{new Stroke(0x0066DD, 1)}"
								fill="{new SolidColor(0x0066DD, 1)}" 
								radius="3" form="segment"
								updateComplete="seriesComplete()"  />
		     </mx:series>
		        
		        <mx:annotationElements>
		            <mx:Canvas id="mainChartArea" width="100%" height="100%" buttonMode="true" 
		            		   mouseDown="setMouseDown(mainChart);" />
		        </mx:annotationElements>
 
		    </mx:AreaChart>
		    
		</mx:Canvas>
		<mx:Array id="backgroundContents">
			<mx:GridLines id="backgroundGrid" horizontalStroke="{new Stroke(0xCCCCCC, 1)}" verticalStroke="{new Stroke(0xCCCCCC, 1)}" />
		</mx:Array>  
			
<!-- volume column chart -->
		<mx:Canvas id="smallChartContainer" 
				   x="0" y="{mainChartContainer.y + mainChartContainer.height - 2 - 18}" 	
				   width="{CHART_WIDTH}" height="{VOLUME_CHART_HEIGHT}" 
				   horizontalScrollPolicy="off" verticalScrollPolicy="off"
				   borderSides="left right bottom" styleName="canvasContainerStyles">
			
			<mx:CartesianChart id="smallChart"
							   x="-2" y="0" 
							   width="{CHART_WIDTH}" height="{VOLUME_CHART_HEIGHT}" 
							   dataProvider="{mainData}"
							   showDataTips="true" backgroundElements="[]">
			
				<mx:horizontalAxis>
					<mx:DateTimeAxis dataUnits="days" parseFunction="dateParse" />
				</mx:horizontalAxis>
				
		        <mx:horizontalAxisRenderer>
		        	<mx:AxisRenderer width="0" height="0" styleName="noAxisStyle"  />
		        </mx:horizontalAxisRenderer>
		        
		        <mx:verticalAxis><mx:LinearAxis baseAtZero="false" /></mx:verticalAxis>
		        
		        <mx:verticalAxisRenderer>
		        	<mx:AxisRenderer width="0" height="0" styleName="noAxisStyle"  />
		        </mx:verticalAxisRenderer>
		        
		        <mx:series>
		            <mx:ColumnSeries id="numberfOfFilesSmallSeries" name="close" xField="revisionDate" yField="numberfOfFiles"
		            			   	 fill="{new SolidColor(0x0066DD, 0.5)}" 
		            			   	 maxColumnWidth="3" />
		            <mx:ColumnSeries id="numberOfUnCommentedCommitsSmallSeries" name="close" xField="revisionDate" yField="numberOfUnCommentedCommits"
		            			   	 fill="{new SolidColor(0x0066DD, 0.5)}" 
		            			   	 maxColumnWidth="3" />
		            <mx:ColumnSeries id="numberOfFilesModifiedSmallSeries" name="close" xField="revisionDate" yField="numberOfFilesModified"
		            			   	 fill="{new SolidColor(0x0066DD, 0.5)}" 
		            			   	 maxColumnWidth="3" />
		            <mx:ColumnSeries id="numberOfCommentedCommitsSmallSeries" name="close" xField="revisionDate" yField="numberOfCommentedCommits"
		            			   	 fill="{new SolidColor(0x0066DD, 0.5)}" 
		            			   	 maxColumnWidth="3" />
		            <mx:ColumnSeries id="numberOfFilesAddedSmallSeries" name="close" xField="revisionDate" yField="numberOfFilesAdded"
		            			   	 fill="{new SolidColor(0x0066DD, 0.5)}" 
		            			   	 maxColumnWidth="3" />
		            <mx:ColumnSeries id="numberOfFilesDeletedSmallSeries" name="close" xField="revisionDate" yField="numberOfFilesDeleted"
		            			   	 fill="{new SolidColor(0x0066DD, 0.5)}" 
		            			   	 maxColumnWidth="3" />
		        </mx:series>	        
		        
		    </mx:CartesianChart>
		</mx:Canvas>
			
<!-- bottom chart with divided box for range selection -->
		<mx:Canvas id="intervalChartContainer" 	
				   x="15" y="{smallChartContainer.y + smallChartContainer.height - 1}" 
				   width="{CHART_WIDTH - 31}" height="{RANGE_CHART_HEIGHT}" 
				   horizontalScrollPolicy="off" verticalScrollPolicy="off" 
				   styleName="canvasContainerStyles" borderSides="left right" >
				   
			<mx:AreaChart x="-2" y="0" 
				id="intervalChart" 
				backgroundElements="[]"
				showDataTips="false"  
				dataProvider="{rangeData}"
				width="{CHART_WIDTH}" height="{RANGE_CHART_HEIGHT}">

				<mx:horizontalAxis><mx:DateTimeAxis dataUnits="days" parseFunction="{dateParse}" /></mx:horizontalAxis>
		        
		        <mx:horizontalAxisRenderer>
		        	<mx:AxisRenderer styleName="noAxisStyle" />
		        </mx:horizontalAxisRenderer>
		        
		        <mx:verticalAxis><mx:LinearAxis baseAtZero="false" /></mx:verticalAxis>
		        
		        <mx:verticalAxisRenderer>
		        	<mx:AxisRenderer styleName="noAxisStyle"  />
		        </mx:verticalAxisRenderer>
			        
		        <mx:series>
		            <mx:AreaSeries id="smallSeries" name="close" xField="revisionDate" yField="numberfOfFiles" 
		            			   areaFill="{new SolidColor(0xcde2f8, 0.20)}" 
		            			   areaStroke="{new Stroke(0x0066dd, 1)}"
		            			   form="curve" />
		        </mx:series>
		        <mx:annotationElements>
					<mx:HDividedBox id="dividedBox" horizontalScrollPolicy="off"
									width="100%" height="100%" 
									liveDragging="true" 
									dividerRelease="{updateIndicatorValuesWithEffect()}"
									dividerSkin="{blankDividerClass}"
									mouseOver="dividedBox.setStyle('dividerSkin', dividerClass);" 
									mouseOut="dividedBox.setStyle('dividerSkin', blankDividerClass);"
									borderSides="bottom top">
					
						<mx:Canvas id="leftBox" backgroundColor="#FFFFFF" backgroundAlpha="0.5" width="50%" height="100%" 
								   borderColor="#333333" borderThickness="1" borderStyle="solid" borderSides="top right" />
						<mx:Canvas backgroundColor="#FFFFFF" backgroundAlpha="0" width="50%" height="100%" buttonMode="true" 
								   mouseDown="setMouseDown(intervalChart);" />
						<mx:Canvas id="rightBox" backgroundColor="#FFFFFF" backgroundAlpha="0.5" width="0%" height="100%" 
								   borderColor="#333333" borderThickness="1" borderStyle="solid" borderSides="top left" />
					
					</mx:HDividedBox>
				</mx:annotationElements>
				
			</mx:AreaChart>
			
		</mx:Canvas>	
		
		<!-- scroll bar and slider component for range selector -->
		<mx:Canvas id="rangeSelectorContainer" 
					   x="2" y="{intervalChartContainer.y + intervalChartContainer.height - 13}" 
					   width="{dividedBox.width}" height="25" horizontalScrollPolicy="off">
		
			<!-- the background skin for our slider bar -->
			<skins:GradientBox width="{rangeSelectorContainer.width - 30}" height="12" x="15" y="8"
							   gradientColors="[#EEEEEE, #999999]"
	                           gradientAlphas="[.5, 0.75]"
	                           gradientRatios="[0, 255]"
	                           gradientAngle="90"
	                           borderColor="#999999" borderStyle="solid" borderThickness="1"
	                            />
	        <!-- button to move the entire range to the left -->                    
			<mx:Button cornerRadius="2" width="14" height="12" x="0" y="8" 
					   click="{clickUpdate(-20)}" icon="{leftScroll}" />
			
			<!-- the dual drag slider which represents the range of data shown in the upper chart -->	   
			<code:HSlider id="slider" x="14" y="0" height="25" width="{rangeSelectorContainer.width - 28}"
		                        trackHighlightSkin="skins.SliderThumbHighlightSkin"
		                        trackSkin="{blankDividerClass}" showDataTip="false"
		                        showTrackHighlight="true"
		                        allowTrackClick="false" allowThumbOverlap="false"
		                        change="updateBox()"
		                        thumbCount="2"
		                        liveDragging="true" 
		                        snapInterval="1"
		                        values="{[leftIndicator.x, rightIndicator.x]}"
		                        minimum="0" maximum="{rangeData.length}" 
		                        />
		                        
		    <!-- button to move the entire range to the right -->                  
			<mx:Button cornerRadius="2" width="14" height="12" x="{slider.width + 13}" y="8" 
					   click="{clickUpdate(20)}" icon="{rightScroll}" />
					   
	    </mx:Canvas>
	    
 <!-- invisible range value indicators which are bound to and represent the visible range boundaries for the upper chart -->
	    <mx:Canvas x="15" y="{rangeSelectorContainer.y + rangeSelectorContainer.height - 5}" 
	    		   width="100%" height="25" 
	    		   horizontalScrollPolicy="off" visible="false" includeInLayout="true" >
			<mx:VRule id="leftIndicator" width="1" height="15" y="5" strokeColor="#000000" />
			<mx:VRule id="rightIndicator" width="1" height="15" y="5" strokeColor="#000000" />
		</mx:Canvas>
		
<!-- header text indicator values and range link buttons -->
		<mx:HBox horizontalGap="2" horizontalAlign="left" width="{CHART_WIDTH}" verticalAlign="middle" paddingTop="2">
			<mx:Label text="Zoom" fontWeight="bold" />
			<mx:LinkButton fontWeight="normal" label="5d" 
						   width="25" height="16"
						   click="moveSlider(leftIndicator, rightIndicator.x - 5, true);"  />
			<mx:LinkButton fontWeight="normal" label="1m" 
						   width="25" height="16"
						   click="moveSlider(leftIndicator, rightIndicator.x - 30, true);" />
			<mx:LinkButton fontWeight="normal" label="3m" 
						   width="25" height="16" 
						   click="moveSlider(leftIndicator, rightIndicator.x - 90, true);" />
			<mx:LinkButton fontWeight="normal" label="6m" 
						   width="25" height="16"
						   click="moveSlider(leftIndicator, rightIndicator.x - 182, true);"  />
			<mx:LinkButton fontWeight="normal" label="Max" 
						   width="30" height="16" 
						   click="moveSlider(leftIndicator, 0, true); moveSlider(rightIndicator, rangeData.length, true);" />
		</mx:HBox>
		
	<chart:AdvancedLegend x="{mainChart.width + 20}" dataProvider="{mainChart}"/>	
	
    <mx:DateFormatter id="labelMonthFormatter" formatString="MM/YY" />
    <mx:DateFormatter id="labelDayFormatter" formatString="MMM DD YYYY" />
    <!--<mx:DateFormatter id="labelDefaultFormatter" formatString="EEE MMM D" />-->
	     
</mx:Canvas>
